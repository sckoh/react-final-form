{"version":3,"file":"react-final-form.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../src/renderComponent.js","../src/useWhenValueChanges.js","../src/shallowEqual.js","../src/isSyntheticEvent.js","../src/context.js","../src/useLatest.js","../src/ReactFinalForm.js","../src/useConstant.js","../src/useForm.js","../src/useFormState.js","../src/useField.js","../src/FormSpy.js","../src/isReactNative.js","../src/getValue.js","../src/Field.js","../src/index.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// @flow\nimport * as React from 'react'\nimport type { RenderableProps } from './types'\n\n// shared logic between components that use either render prop,\n// children render function, or component prop\nexport default function renderComponent<T>(\n  props: RenderableProps<T> & T,\n  name: string\n): React.Node {\n  const { render, children, component, ...rest } = props\n  if (component) {\n    return React.createElement(component, { ...rest, children, render })\n  }\n  if (render) {\n    return render(children === undefined ? rest : { ...rest, children }) // inject children back in\n  }\n  if (typeof children !== 'function') {\n    throw new Error(\n      `Must specify either a render prop, a render function as children, or a component prop to ${name}`\n    )\n  }\n  return children(rest)\n}\n","// @flow\nimport React from 'react'\n\nexport default function useWhenValueChanges(\n  value: any,\n  callback: () => void,\n  isEqual: (any, any) => boolean = (a, b) => a === b\n) {\n  const previous = React.useRef(value)\n  React.useEffect(() => {\n    if (!isEqual(value, previous.current)) {\n      callback()\n      previous.current = value\n    }\n  })\n}\n","// @flow\nconst shallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true\n  }\n  if (typeof a !== 'object' || !a || typeof b !== 'object' || !b) {\n    return false\n  }\n  var keysA = Object.keys(a)\n  var keysB = Object.keys(b)\n  if (keysA.length !== keysB.length) {\n    return false\n  }\n  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(b)\n  for (var idx = 0; idx < keysA.length; idx++) {\n    var key = keysA[idx]\n    if (!bHasOwnProperty(key) || a[key] !== b[key]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default shallowEqual\n","// @flow\nconst isSyntheticEvent = (candidate: any): boolean =>\n  !!(candidate && typeof candidate.stopPropagation === 'function')\n\nexport default isSyntheticEvent\n","// @flow\nimport * as React from 'react'\nimport type { FormApi } from 'final-form'\n\nexport default React.createContext<?FormApi<any>>()\n","// @flow\nimport React from 'react'\n\nexport default function useLatest<T>(value: T): { +current: T } {\n  const ref = React.useRef(value)\n\n  React.useEffect(() => {\n    ref.current = value\n  })\n\n  return ref\n}\n","// @flow\nimport * as React from 'react'\nimport {\n  createForm,\n  formSubscriptionItems,\n  version as ffVersion\n} from 'final-form'\nimport type {\n  FormApi,\n  Config,\n  FormSubscription,\n  FormState,\n  FormValuesShape,\n  Unsubscribe\n} from 'final-form'\nimport type { FormProps as Props } from './types'\nimport renderComponent from './renderComponent'\nimport useWhenValueChanges from './useWhenValueChanges'\nimport useConstant from './useConstant'\nimport shallowEqual from './shallowEqual'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport type { FormRenderProps } from './types.js.flow'\nimport ReactFinalFormContext from './context'\nimport useLatest from './useLatest'\nimport { version } from '../package.json'\n\nexport { version }\n\nconst versions = {\n  'final-form': ffVersion,\n  'react-final-form': version\n}\n\nexport const all: FormSubscription = formSubscriptionItems.reduce(\n  (result, key) => {\n    result[key] = true\n    return result\n  },\n  {}\n)\n\nfunction ReactFinalForm<FormValues: FormValuesShape>({\n  debug,\n  decorators,\n  destroyOnUnregister,\n  form: alternateFormApi,\n  initialValues,\n  initialValuesEqual,\n  keepDirtyOnReinitialize,\n  mutators,\n  onSubmit,\n  subscription = all,\n  validate,\n  validateOnBlur,\n  ...rest\n}: Props<FormValues>) {\n  const config: Config<FormValues> = {\n    debug,\n    destroyOnUnregister,\n    initialValues,\n    keepDirtyOnReinitialize,\n    mutators,\n    onSubmit,\n    validate,\n    validateOnBlur\n  }\n\n  const form: FormApi<FormValues> = useConstant(() => {\n    const f = alternateFormApi || createForm<FormValues>(config)\n    f.pauseValidation()\n    return f\n  })\n\n  // synchronously register and unregister to query form state for our subscription on first render\n  const [state, setState] = React.useState<FormState<FormValues>>(\n    (): FormState<FormValues> => {\n      let initialState: FormState<FormValues> = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription)()\n      return initialState\n    }\n  )\n\n  // save a copy of state that can break through the closure\n  // on the shallowEqual() line below.\n  const stateRef = useLatest<FormState<FormValues>>(state)\n\n  React.useEffect(() => {\n    // We have rendered, so all fields are no registered, so we can unpause validation\n    form.isValidationPaused() && form.resumeValidation()\n    const unsubscriptions: Unsubscribe[] = [\n      form.subscribe(s => {\n        if (!shallowEqual(s, stateRef.current)) {\n          setState(s)\n        }\n      }, subscription),\n      ...(decorators\n        ? decorators.map(decorator =>\n            // this noop ternary is to appease the flow gods\n            // istanbul ignore next\n            decorator(form)\n          )\n        : [])\n    ]\n\n    return () => {\n      unsubscriptions.forEach(unsubscribe => unsubscribe())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [decorators])\n\n  // warn about decorator changes\n  // istanbul ignore next\n  if (process.env.NODE_ENV !== 'production') {\n    // You're never supposed to use hooks inside a conditional, but in this\n    // case we can be certain that you're not going to be changing your\n    // NODE_ENV between renders, so this is safe.\n\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useWhenValueChanges(\n      decorators,\n      () => {\n        console.error(\n          'Form decorators should not change from one render to the next as new values will be ignored'\n        )\n      },\n      shallowEqual\n    )\n  }\n\n  // allow updatable config\n  useWhenValueChanges(debug, () => {\n    form.setConfig('debug', debug)\n  })\n  useWhenValueChanges(destroyOnUnregister, () => {\n    form.destroyOnUnregister = !!destroyOnUnregister\n  })\n  useWhenValueChanges(\n    initialValues,\n    () => {\n      form.setConfig('initialValues', initialValues)\n    },\n    initialValuesEqual || shallowEqual\n  )\n  useWhenValueChanges(keepDirtyOnReinitialize, () => {\n    form.setConfig('keepDirtyOnReinitialize', keepDirtyOnReinitialize)\n  })\n  useWhenValueChanges(mutators, () => {\n    form.setConfig('mutators', mutators)\n  })\n  useWhenValueChanges(onSubmit, () => {\n    form.setConfig('onSubmit', onSubmit)\n  })\n  useWhenValueChanges(validate, () => {\n    form.setConfig('validate', validate)\n  })\n  useWhenValueChanges(validateOnBlur, () => {\n    form.setConfig('validateOnBlur', validateOnBlur)\n  })\n\n  const handleSubmit = (event: ?SyntheticEvent<HTMLFormElement>) => {\n    if (event) {\n      // sometimes not true, e.g. React Native\n      if (typeof event.preventDefault === 'function') {\n        event.preventDefault()\n      }\n      if (typeof event.stopPropagation === 'function') {\n        // prevent any outer forms from receiving the event too\n        event.stopPropagation()\n      }\n    }\n    return form.submit()\n  }\n\n  const renderProps: FormRenderProps<FormValues> = {\n    // assign to force Flow check\n    ...state,\n    form: {\n      ...form,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          form.reset()\n        } else {\n          form.reset(eventOrValues)\n        }\n      }\n    },\n    handleSubmit\n  }\n  return React.createElement(\n    ReactFinalFormContext.Provider,\n    { value: form },\n    renderComponent(\n      {\n        ...rest,\n        ...renderProps,\n        __versions: versions\n      },\n      'ReactFinalForm'\n    )\n  )\n}\n\nexport default React.memo(ReactFinalForm)\n","// @flow\nimport React from 'react'\n\n/**\n * A simple hook to create a constant value that lives for\n * the lifetime of the component.\n *\n * Plagiarized from https://github.com/Andarist/use-constant\n *\n * Do NOT reuse this code unless you know what you're doing.\n * Use Andarist's hook; it's more fault tolerant to things like\n * falsy values.\n *\n * @param {Function} init - A function to generate the value\n */\nexport default function useConstant<T>(init: () => T): T {\n  const ref = React.useRef<?T>()\n  if (!ref.current) {\n    ref.current = init()\n  }\n  return ref.current\n}\n","// @flow\nimport * as React from 'react'\nimport type { FormApi, FormValuesShape } from 'final-form'\nimport ReactFinalFormContext from './context'\n\nfunction useForm<FormValues: FormValuesShape>(\n  componentName?: string\n): FormApi<FormValues> {\n  const form: ?FormApi<FormValues> = React.useContext(ReactFinalFormContext)\n  if (!form) {\n    throw new Error(\n      `${componentName || 'useForm'} must be used inside of a <Form> component`\n    )\n  }\n  return form\n}\n\nexport default useForm\n","// @flow\nimport * as React from 'react'\nimport type { UseFormStateParams } from './types'\nimport type { FormState, FormApi, FormValuesShape } from 'final-form'\nimport { all } from './ReactFinalForm'\nimport useForm from './useForm'\n\nfunction useFormState<FormValues: FormValuesShape>({\n  onChange,\n  subscription = all\n}: UseFormStateParams<FormValues> = {}): FormState<FormValues> {\n  const form: FormApi<FormValues> = useForm<FormValues>('useFormState')\n  const firstRender = React.useRef(true)\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FormState<FormValues>>(\n    (): FormState<FormValues> => {\n      let initialState: FormState<FormValues> = {}\n      form.subscribe(state => {\n        initialState = state\n      }, subscription)()\n      if (onChange) {\n        onChange(initialState)\n      }\n      return initialState\n    }\n  )\n\n  React.useEffect(\n    () =>\n      form.subscribe(newState => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(newState)\n          if (onChange) {\n            onChange(newState)\n          }\n        }\n      }, subscription),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  return state\n}\n\nexport default useFormState\n","// @flow\nimport * as React from 'react'\nimport { fieldSubscriptionItems } from 'final-form'\nimport type {\n  FieldSubscription,\n  FieldState,\n  FormApi,\n  FormValuesShape\n} from 'final-form'\nimport type { UseFieldConfig, FieldInputProps, FieldRenderProps } from './types'\nimport isReactNative from './isReactNative'\nimport getValue from './getValue'\nimport useForm from './useForm'\nimport useLatest from './useLatest'\n\nconst all: FieldSubscription = fieldSubscriptionItems.reduce((result, key) => {\n  result[key] = true\n  return result\n}, {})\n\nconst defaultFormat = (value: ?any, name: string) =>\n  value === undefined ? '' : value\nconst defaultParse = (value: ?any, name: string) =>\n  value === '' ? undefined : value\n\nfunction useField<FormValues: FormValuesShape>(\n  name: string,\n  {\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    component,\n    defaultValue,\n    format = defaultFormat,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    parse = defaultParse,\n    subscription = all,\n    type,\n    validate,\n    validateFields,\n    value: _value\n  }: UseFieldConfig = {}\n): FieldRenderProps {\n  const form: FormApi<FormValues> = useForm<FormValues>('useField')\n\n  const validateRef = useLatest(validate)\n\n  const beforeSubmitRef = useLatest(() => {\n    if (formatOnBlur) {\n      const formatted = format(state.value, state.name)\n      if (formatted !== state.value) {\n        state.change(formatted)\n      }\n    }\n    return beforeSubmit && beforeSubmit()\n  })\n\n  const register = (callback: FieldState => void) =>\n    form.registerField(name, callback, subscription, {\n      afterSubmit,\n      beforeSubmit: () => beforeSubmitRef.current(),\n      defaultValue,\n      getValidator: () => validateRef.current,\n      initialValue,\n      isEqual,\n      validateFields\n    })\n\n  const firstRender = React.useRef(true)\n\n  // synchronously register and unregister to query field state for our subscription on first render\n  const [state, setState] = React.useState<FieldState>((): FieldState => {\n    let initialState: FieldState = {}\n\n    // temporarily disable destroyOnUnregister\n    const destroyOnUnregister = form.destroyOnUnregister\n    form.destroyOnUnregister = false\n\n    register(state => {\n      initialState = state\n    })()\n\n    // return destroyOnUnregister to its original value\n    form.destroyOnUnregister = destroyOnUnregister\n\n    return initialState\n  })\n\n  React.useEffect(\n    () =>\n      register(state => {\n        if (firstRender.current) {\n          firstRender.current = false\n        } else {\n          setState(state)\n        }\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      name,\n      defaultValue,\n      // If we want to allow inline fat-arrow field-level validation functions, we\n      // cannot reregister field every time validate function !==.\n      // validate,\n      initialValue,\n      isEqual\n      // The validateFields array is often passed as validateFields={[]}, creating\n      // a !== new array every time. If it needs to be changed, a rerender/reregister\n      // can be forced by changing the key prop\n      // validateFields\n    ]\n  )\n\n  const handlers = {\n    onBlur: React.useCallback(\n      (event: ?SyntheticFocusEvent<*>) => {\n        state.blur()\n        if (formatOnBlur) {\n          /**\n           * Here we must fetch the value directly from Final Form because we cannot\n           * trust that our `state` closure has the most recent value. This is a problem\n           * if-and-only-if the library consumer has called `onChange()` immediately\n           * before calling `onBlur()`, but before the field has had a chance to receive\n           * the value update from Final Form.\n           */\n          const fieldState = form.getFieldState(state.name)\n          // this ternary is primarily to appease the Flow gods\n          // istanbul ignore next\n          state.change(\n            format(fieldState ? fieldState.value : state.value, state.name)\n          )\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [state.name, state.value, format, formatOnBlur]\n    ),\n    onChange: React.useCallback(\n      (event: SyntheticInputEvent<*> | any) => {\n        // istanbul ignore next\n        if (process.env.NODE_ENV !== 'production' && event && event.target) {\n          const targetType = event.target.type\n          const unknown =\n            ~['checkbox', 'radio', 'select-multiple'].indexOf(targetType) &&\n            !type\n\n          const value: any =\n            targetType === 'select-multiple' ? state.value : _value\n\n          if (unknown) {\n            console.error(\n              `You must pass \\`type=\"${\n                targetType === 'select-multiple' ? 'select' : targetType\n              }\"\\` prop to your Field(${name}) component.\\n` +\n                `Without it we don't know how to unpack your \\`value\\` prop - ${\n                  Array.isArray(value) ? `[${value}]` : `\"${value}\"`\n                }.`\n            )\n          }\n        }\n\n        const value: any =\n          event && event.target\n            ? getValue(event, state.value, _value, isReactNative)\n            : event\n        state.change(parse(value, name))\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [_value, name, parse, state.change, state.value, type]\n    ),\n    onFocus: React.useCallback((event: ?SyntheticFocusEvent<*>) => {\n      state.focus()\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  }\n\n  let { blur, change, focus, value, name: ignoreName, ...otherState } = state\n  const meta = {\n    // this is to appease the Flow gods\n    active: otherState.active,\n    data: otherState.data,\n    dirty: otherState.dirty,\n    dirtySinceLastSubmit: otherState.dirtySinceLastSubmit,\n    error: otherState.error,\n    initial: otherState.initial,\n    invalid: otherState.invalid,\n    length: otherState.length,\n    modified: otherState.modified,\n    pristine: otherState.pristine,\n    submitError: otherState.submitError,\n    submitFailed: otherState.submitFailed,\n    submitSucceeded: otherState.submitSucceeded,\n    submitting: otherState.submitting,\n    touched: otherState.touched,\n    valid: otherState.valid,\n    validating: otherState.validating,\n    visited: otherState.visited\n  }\n  if (formatOnBlur) {\n    if (component === 'input') {\n      value = defaultFormat(value, name)\n    }\n  } else {\n    value = format(value, name)\n  }\n  if (value === null && !allowNull) {\n    value = ''\n  }\n  const input: FieldInputProps = { name, value, type, ...handlers }\n  if (type === 'checkbox') {\n    if (_value === undefined) {\n      input.checked = !!value\n    } else {\n      input.checked = !!(Array.isArray(value) && ~value.indexOf(_value))\n      input.value = _value\n    }\n  } else if (type === 'radio') {\n    input.checked = value === _value\n    input.value = _value\n  } else if (component === 'select' && multiple) {\n    input.value = input.value || []\n    input.multiple = true\n  }\n\n  const renderProps: FieldRenderProps = { input, meta } // assign to force Flow check\n  return renderProps\n}\n\nexport default useField\n","// @flow\nimport renderComponent from './renderComponent'\nimport type { FormSpyPropsWithForm as Props, FormSpyRenderProps } from './types'\nimport type { FormValuesShape } from 'final-form'\nimport isSyntheticEvent from './isSyntheticEvent'\nimport useForm from './useForm'\nimport useFormState from './useFormState'\n\nfunction FormSpy<FormValues: FormValuesShape>({\n  onChange,\n  subscription,\n  ...rest\n}: Props<FormValues>) {\n  const reactFinalForm = useForm<FormValues>('FormSpy')\n  const state = useFormState({ onChange, subscription })\n  if (onChange) {\n    return null\n  }\n\n  const renderProps: FormSpyRenderProps<FormValues> = {\n    form: {\n      ...reactFinalForm,\n      reset: eventOrValues => {\n        if (isSyntheticEvent(eventOrValues)) {\n          // it's a React SyntheticEvent, call reset with no arguments\n          reactFinalForm.reset()\n        } else {\n          reactFinalForm.reset(eventOrValues)\n        }\n      }\n    }\n  }\n  return renderComponent(\n    {\n      ...rest,\n      ...state,\n      ...renderProps\n    },\n    'FormSpy'\n  )\n}\n\nexport default React.memo(FormSpy)\n","// @flow\nconst isReactNative =\n  typeof window !== 'undefined' &&\n  window.navigator &&\n  window.navigator.product &&\n  window.navigator.product === 'ReactNative'\n\nexport default isReactNative\n","// @flow\nconst getSelectedValues = options => {\n  const result = []\n  if (options) {\n    for (let index = 0; index < options.length; index++) {\n      const option = options[index]\n      if (option.selected) {\n        result.push(option.value)\n      }\n    }\n  }\n  return result\n}\n\nconst getValue = (\n  event: SyntheticInputEvent<*>,\n  currentValue: any,\n  valueProp: any,\n  isReactNative: boolean\n) => {\n  if (\n    !isReactNative &&\n    event.nativeEvent &&\n    (event.nativeEvent: Object).text !== undefined\n  ) {\n    return (event.nativeEvent: Object).text\n  }\n  if (isReactNative && event.nativeEvent) {\n    return (event.nativeEvent: any).text\n  }\n  const detypedEvent: any = event\n  const { target: { type, value, checked } } = detypedEvent\n  switch (type) {\n    case 'checkbox':\n      if (valueProp !== undefined) {\n        // we are maintaining an array, not just a boolean\n        if (checked) {\n          // add value to current array value\n          return Array.isArray(currentValue)\n            ? currentValue.concat(valueProp)\n            : [valueProp]\n        } else {\n          // remove value from current array value\n          if (!Array.isArray(currentValue)) {\n            return currentValue\n          }\n          const index = currentValue.indexOf(valueProp)\n          if (index < 0) {\n            return currentValue\n          } else {\n            return currentValue\n              .slice(0, index)\n              .concat(currentValue.slice(index + 1))\n          }\n        }\n      } else {\n        // it's just a boolean\n        return !!checked\n      }\n    case 'select-multiple':\n      return getSelectedValues((event.target: any).options)\n    default:\n      return value\n  }\n}\n\nexport default getValue\n","// @flow\nimport * as React from 'react'\nimport type { FieldProps as Props, FieldRenderProps } from './types'\nimport renderComponent from './renderComponent'\nimport useField from './useField'\n\nconst Field = ({\n  afterSubmit,\n  allowNull,\n  beforeSubmit,\n  children,\n  component,\n  defaultValue,\n  format,\n  formatOnBlur,\n  initialValue,\n  isEqual,\n  multiple,\n  name,\n  parse,\n  subscription,\n  type,\n  validate,\n  validateFields,\n  value,\n  ...rest\n}: Props) => {\n  const field: FieldRenderProps = useField(name, {\n    afterSubmit,\n    allowNull,\n    beforeSubmit,\n    children,\n    component,\n    defaultValue,\n    format,\n    formatOnBlur,\n    initialValue,\n    isEqual,\n    multiple,\n    parse,\n    subscription,\n    type,\n    validate,\n    validateFields,\n    value\n  })\n\n  if (typeof children === 'function') {\n    return (children: Function)({ ...field, ...rest })\n  }\n\n  if (typeof component === 'string') {\n    // ignore meta, combine input with any other props\n    return React.createElement(component, { ...field.input, children, ...rest })\n  }\n  return renderComponent(\n    { ...field, children, component, ...rest },\n    `Field(${name})`\n  )\n}\n\nexport default React.memo(Field)\n","// @flow\nimport Form from './ReactFinalForm'\nimport FormSpy from './FormSpy'\nexport { default as Field } from './Field'\nexport { default as Form, version } from './ReactFinalForm'\nexport { default as FormSpy } from './FormSpy'\nexport { default as useField } from './useField'\nexport { default as useFormState } from './useFormState'\nexport { default as useForm } from './useForm'\nexport function withTypes() {\n  return { Form, FormSpy }\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","renderComponent","props","name","render","children","component","rest","React","undefined","Error","useWhenValueChanges","value","callback","isEqual","a","b","previous","useRef","useEffect","current","shallowEqual","keysA","keysB","bHasOwnProperty","bind","idx","isSyntheticEvent","candidate","stopPropagation","useLatest","ref","versions","ffVersion","version","all","formSubscriptionItems","reduce","result","debug","decorators","destroyOnUnregister","alternateFormApi","form","initialValues","initialValuesEqual","keepDirtyOnReinitialize","mutators","onSubmit","subscription","validate","validateOnBlur","config","init","useConstant","f","createForm","pauseValidation","initialState","subscribe","state","setState","stateRef","isValidationPaused","resumeValidation","unsubscriptions","s","map","decorator","forEach","unsubscribe","setConfig","renderProps","reset","eventOrValues","handleSubmit","event","preventDefault","submit","ReactFinalFormContext","Provider","__versions","useForm","componentName","useFormState","onChange","firstRender","newState","defaultFormat","defaultParse","memo","reactFinalForm","isReactNative","window","navigator","product","fieldSubscriptionItems","useField","register","registerField","afterSubmit","beforeSubmit","beforeSubmitRef","defaultValue","getValidator","validateRef","initialValue","validateFields","allowNull","format","formatOnBlur","multiple","parse","type","_value","formatted","change","handlers","onBlur","blur","fieldState","getFieldState","currentValue","valueProp","nativeEvent","text","checked","Array","isArray","concat","index","slice","options","option","selected","push","getSelectedValues","getValue","onFocus","focus","otherState","meta","active","data","dirty","dirtySinceLastSubmit","error","initial","invalid","modified","pristine","submitError","submitFailed","submitSucceeded","submitting","touched","valid","validating","visited","input","field","Form","FormSpy"],"mappings":"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"}